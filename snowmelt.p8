pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

game_map = {}
debug = 0
directions = {}

draw_map = false

btn_state = {}

player = {}

function _init()
    directions[1] = {x=1,y=0}
    directions[2] = {x=-1,y=0}
    directions[3] = {x=0,y=1}
    directions[4] = {x=0,y=-1}
    player.x = 0
    player.y = 0
    palt(0, false)
    palt(14, true)
    srand()
    map_gen()
end

function _draw()
    cls()
    if draw_map then
        sspr(24,0,64,64,0,0,128,128)
    else
        spr(1,player.x,player.y,2,2)
    end
    print(debug,0,0)
end

function _update60()
    btn_update()
    if map_prs() then
        draw_map = not draw_map
    end
    if (left()) player.x -= 1
    if (right()) player.x += 1
    if (up()) player.y -= 1
    if (down()) player.y += 1
end

function btn_update()
    for i = 0,5 do
        btn_state[i] = btn(i)
        if btn_state[i] then
            if (btn_state[i+6] < 32000) btn_state[i+6]+=1
        else
            btn_state[i+6]=0
        end
    end
end

function map_prs()
    return btn_state[5] and (btn_state[11] == 1)
end

function left() return btn_state[0] end
function right() return btn_state[1] end
function up() return btn_state[2] end
function down() return btn_state[3] end

function map_gen()
    -- create landmass
    state = {
        open_cells = {},
        closed_cells = {},
        land = 0,
    }
    num_seeds = 6
    for i=1,num_seeds do
        seed(state.open_cells, 10, 54, 10, 30)
    end
    for i=1,100 do
        pool(state)
    end
    for key, elev in pairs(state.open_cells) do
        if cell_get_num_neighbors(state.open_cells,key_get_x(key),key_get_y(key)) == 0 then
            state.closed_cells[key] = state.open_cells[key]
            state.open_cells[key] = nil
        end
    end
    spring_spots_p = {len = 0}
    for key, elev in pairs(state.closed_cells) do
        --if elev > 10 then
        if elev == 1 then 
            spring_spots_p.len += 1
            spring_spots_p[spring_spots_p.len] = key
        end
        e = flr(elev / 30 * 5)
        type = "land"
        if (e == 1) type = "grass"
        if (e == 2) type = "forest"
        if (e == 3) type = "rock"
        if (e == 4) type = "ice"
        game_map[key] = {
            elev = elev,
            type = type
        }
    end
    -- add springs & rivers
    -- pick random closed cells to start from
    num_springs = 30
    spring_spots = {}
    for i=1,num_springs do
        spring_ind = flr(rnd(spring_spots_p.len))+1
        key = spring_spots_p[spring_ind]
        spring_spots[key] = game_map[key]
        --game_map[key].type = "river"
    end
    
    -- find lowest neibor and go there
    -- repeat until water is reached
    for i = 1,100 do
        flow_river(spring_spots)
    end

    -- place warrens
    -- pick random bits of land at a given elevation range

    -- place resources
    -- place huts

    -- draw map
    for key, data in pairs(game_map) do
        color = 0
        if (data.type == "land") color = 4
        if (data.type == "grass") color = 3
        if (data.type == "forest") color = 11
        if (data.type == "rock") color = 5
        if (data.type == "ice") color = 7
        if (data.type == "river") color = 12
        sset(24+key_get_x(key),key_get_y(key), color)
    end
end

function dumb_count(lis)
    c = 0
    for key,value in pairs(lis) do
        if (value!=nil)c+=1
    end
    return c
end

function flow_river(water)
    if (dumb_count(water) == 0) return false
    for key, spot in pairs(water) do
        game_map[key].type = "river"
        elev = spot.elev
        lowest_key = key
        key_x = key_get_x(key)
        key_y = key_get_y(key)
        offset = flr(rnd(4))
        for i = 1,4 do
            ind = i+offset
            if (ind>4) ind -= 4
            dir = directions[ind]
        --for dir in all(directions) do
            temp_x = key_x+dir.x
            temp_y = key_y+dir.y
            temp_key = key_gen(temp_x,temp_y)
            chance = elev / 20
            if rnd(1)<chance then 
                break
            end
            if game_map[temp_key] == nil then
                break
            elseif game_map[temp_key].type == "ice" then
                break
            elseif game_map[temp_key].elev > elev then
                elev = game_map[temp_key].elev
                lowest_key = temp_key
            end
        end
        if lowest_key != key then
            new_spot = game_map[lowest_key]
            --new_spot.type = "river"
            water[lowest_key] = new_spot
            water[key] = nil
        end
    end
    return true
end

function cell_get_num_neighbors(table, x,y)
    n = 0
    for dir in all(directions) do
        key = key_gen(x+dir.x, y+dir.y)
        if (table[key] ~= nil) n += 1
    end
    return n
end

function seed(table, min_coord, max_coord, min_elev, max_elev)
    while true do
        x = flr(rnd(max_coord - min_coord)) + min_coord
        y = flr(rnd(max_coord - min_coord)) + min_coord
        key = key_gen(x,y)
        if table[key] == nil then
            table[key_gen(x,y)] = flr(rnd(max_elev-min_elev))+min_elev
            return
        end
    end
end

function pool(state)
    close_prob = 0.5
    close_queue = {len=0}
    for key, elev in pairs(state.open_cells) do
        
        if rnd(1) < close_prob then
            close_queue.len = close_queue.len + 1
            close_queue[close_queue.len] = key
        end
    end
    for i=1,close_queue.len do
        key = close_queue[i]
        key_x = key_get_x(key)
        key_y = key_get_y(key)
        evel = state.open_cells[key]
        state.closed_cells[key] = evel
        state.open_cells[key] = nil
        if (evel == 1) return
        state.land = state.land+1
        --debug = state.land
        for dir in all(directions) do
            temp_x = key_x + dir.x
            temp_y = key_y + dir.y
            temp_key = key_gen(temp_x,temp_y)
            if is_cell_free(temp_x, temp_y, state.open_cells, state.closed_cells) then
                state.open_cells[temp_key] = evel-1 
            end
        end
    end
end

function key_gen(x,y)
    return x.." "..y
end

function string_findchar(str,c)
    for i = 1,#str do
        if (sub(str,i,i) == c) return i
    end
    return -1
end

function key_get_x(key)
    return tonum(sub(key,1,string_findchar(key," ")))
end

function key_get_y(key)
    return tonum(sub(key,string_findchar(key," ")))
end

function is_cell_free(x,y, open_cells, closed_cells)
    if (x < 0 or x > 63) return false
    if (y < 0 or y > 63) return false
    key = key_gen(x,y)
    --if (game_map[key] ~= nil) return false
    if (open_cells[key] ~= nil) return false
    if (closed_cells[key] ~= nil) return false
    return true
end

function screen_load()
end

__gfx__
00000000eeeeeeeeeeeeeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeee33333eeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00700700eeeee3777773eeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00077000eeeee3704073eeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00077000eeeee3744473eeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00700700eeeeee33333eeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeee333373333eee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeee333333333eee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeee3e33733e3eee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeee7ee333ee7eee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeee0ee3e3ee0eee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeeee3e3eeeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeee77e77eeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeee00e00eeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeeeeeeeeeeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000eeeeeeeeeeeeeeee11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
eeeeeeee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
eee4eeee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
ee4404ee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
e444444e000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
44444eee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
e4ee4eee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
e4ee4eee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
eeeeeeee000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
00000000000000000000000011111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000
eee33eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee3bb3ee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e3bbbb3e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e333333e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee44eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee44eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee44eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eee44eee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
